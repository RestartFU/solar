// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/ports/ports.go
//
// Generated by this command:
//
//	mockgen -destination mocks/ports.go -package mocks -source ./internal/ports/ports.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	player "github.com/df-mc/dragonfly/server/player"
	ports "github.com/restartfu/solar/internal/ports"
	gomock "go.uber.org/mock/gomock"
)

// MockIdentifiable is a mock of Identifiable interface.
type MockIdentifiable struct {
	ctrl     *gomock.Controller
	recorder *MockIdentifiableMockRecorder
	isgomock struct{}
}

// MockIdentifiableMockRecorder is the mock recorder for MockIdentifiable.
type MockIdentifiableMockRecorder struct {
	mock *MockIdentifiable
}

// NewMockIdentifiable creates a new mock instance.
func NewMockIdentifiable(ctrl *gomock.Controller) *MockIdentifiable {
	mock := &MockIdentifiable{ctrl: ctrl}
	mock.recorder = &MockIdentifiableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentifiable) EXPECT() *MockIdentifiableMockRecorder {
	return m.recorder
}

// DisplayName mocks base method.
func (m *MockIdentifiable) DisplayName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisplayName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DisplayName indicates an expected call of DisplayName.
func (mr *MockIdentifiableMockRecorder) DisplayName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisplayName", reflect.TypeOf((*MockIdentifiable)(nil).DisplayName))
}

// MockRepository is a mock of Repository interface.
type MockRepository[T ports.Identifiable] struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder[T]
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder[T ports.Identifiable] struct {
	mock *MockRepository[T]
}

// NewMockRepository creates a new mock instance.
func NewMockRepository[T ports.Identifiable](ctrl *gomock.Controller) *MockRepository[T] {
	mock := &MockRepository[T]{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository[T]) EXPECT() *MockRepositoryMockRecorder[T] {
	return m.recorder
}

// Find mocks base method.
func (m *MockRepository[T]) Find(conds ...ports.Condition[T]) (T, bool) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockRepositoryMockRecorder[T]) Find(conds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRepository[T])(nil).Find), conds...)
}

// Save mocks base method.
func (m *MockRepository[T]) Save(v T) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Save", v)
}

// Save indicates an expected call of Save.
func (mr *MockRepositoryMockRecorder[T]) Save(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepository[T])(nil).Save), v)
}

// MockMessenger is a mock of Messenger interface.
type MockMessenger struct {
	ctrl     *gomock.Controller
	recorder *MockMessengerMockRecorder
	isgomock struct{}
}

// MockMessengerMockRecorder is the mock recorder for MockMessenger.
type MockMessengerMockRecorder struct {
	mock *MockMessenger
}

// NewMockMessenger creates a new mock instance.
func NewMockMessenger(ctrl *gomock.Controller) *MockMessenger {
	mock := &MockMessenger{ctrl: ctrl}
	mock.recorder = &MockMessengerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessenger) EXPECT() *MockMessengerMockRecorder {
	return m.recorder
}

// Message mocks base method.
func (m *MockMessenger) Message(p *player.Player, s string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Message", p, s)
}

// Message indicates an expected call of Message.
func (mr *MockMessengerMockRecorder) Message(p, s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MockMessenger)(nil).Message), p, s)
}
