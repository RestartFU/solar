// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/ports/ports.go
//
// Generated by this command:
//
//	mockgen -destination mocks/ports.go -package mocks -source ./internal/ports/ports.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	player "github.com/df-mc/dragonfly/server/player"
	team "github.com/restartfu/solar/internal/core/team"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
	isgomock struct{}
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// LoadTeam mocks base method.
func (m *MockDatabase) LoadTeam(name string) (team.Team, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadTeam", name)
	ret0, _ := ret[0].(team.Team)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LoadTeam indicates an expected call of LoadTeam.
func (mr *MockDatabaseMockRecorder) LoadTeam(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTeam", reflect.TypeOf((*MockDatabase)(nil).LoadTeam), name)
}

// SaveTeam mocks base method.
func (m *MockDatabase) SaveTeam(team team.Team) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveTeam", team)
}

// SaveTeam indicates an expected call of SaveTeam.
func (mr *MockDatabaseMockRecorder) SaveTeam(team any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTeam", reflect.TypeOf((*MockDatabase)(nil).SaveTeam), team)
}

// MockMessageWriter is a mock of MessageWriter interface.
type MockMessageWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMessageWriterMockRecorder
	isgomock struct{}
}

// MockMessageWriterMockRecorder is the mock recorder for MockMessageWriter.
type MockMessageWriterMockRecorder struct {
	mock *MockMessageWriter
}

// NewMockMessageWriter creates a new mock instance.
func NewMockMessageWriter(ctrl *gomock.Controller) *MockMessageWriter {
	mock := &MockMessageWriter{ctrl: ctrl}
	mock.recorder = &MockMessageWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageWriter) EXPECT() *MockMessageWriterMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MockMessageWriter) Write(p *player.Player, s string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Write", p, s)
}

// Write indicates an expected call of Write.
func (mr *MockMessageWriterMockRecorder) Write(p, s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockMessageWriter)(nil).Write), p, s)
}
