// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/core/ports/ports.go
//
// Generated by this command:
//
//	mockgen -destination mocks/ports.go -package mocks -source ./internal/core/ports/ports.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	player "github.com/df-mc/dragonfly/server/player"
	model "github.com/restartfu/solar/internal/core/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockUserRepository) FindAll() model.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].(model.User)
	return ret0
}

// FindAll indicates an expected call of FindAll.
func (mr *MockUserRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockUserRepository)(nil).FindAll))
}

// FindByName mocks base method.
func (m *MockUserRepository) FindByName(name string) (model.User, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", name)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockUserRepositoryMockRecorder) FindByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockUserRepository)(nil).FindByName), name)
}

// Save mocks base method.
func (m *MockUserRepository) Save(arg0 model.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Save", arg0)
}

// Save indicates an expected call of Save.
func (mr *MockUserRepositoryMockRecorder) Save(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUserRepository)(nil).Save), arg0)
}

// MockTeamRepository is a mock of TeamRepository interface.
type MockTeamRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTeamRepositoryMockRecorder
	isgomock struct{}
}

// MockTeamRepositoryMockRecorder is the mock recorder for MockTeamRepository.
type MockTeamRepositoryMockRecorder struct {
	mock *MockTeamRepository
}

// NewMockTeamRepository creates a new mock instance.
func NewMockTeamRepository(ctrl *gomock.Controller) *MockTeamRepository {
	mock := &MockTeamRepository{ctrl: ctrl}
	mock.recorder = &MockTeamRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamRepository) EXPECT() *MockTeamRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockTeamRepository) FindAll() model.Team {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].(model.Team)
	return ret0
}

// FindAll indicates an expected call of FindAll.
func (mr *MockTeamRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockTeamRepository)(nil).FindAll))
}

// FindByMemberName mocks base method.
func (m *MockTeamRepository) FindByMemberName(name string) (model.Team, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByMemberName", name)
	ret0, _ := ret[0].(model.Team)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindByMemberName indicates an expected call of FindByMemberName.
func (mr *MockTeamRepositoryMockRecorder) FindByMemberName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMemberName", reflect.TypeOf((*MockTeamRepository)(nil).FindByMemberName), name)
}

// FindByName mocks base method.
func (m *MockTeamRepository) FindByName(name string) (model.Team, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", name)
	ret0, _ := ret[0].(model.Team)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockTeamRepositoryMockRecorder) FindByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockTeamRepository)(nil).FindByName), name)
}

// Save mocks base method.
func (m *MockTeamRepository) Save(arg0 model.Team) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Save", arg0)
}

// Save indicates an expected call of Save.
func (mr *MockTeamRepositoryMockRecorder) Save(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTeamRepository)(nil).Save), arg0)
}

// MockMessenger is a mock of Messenger interface.
type MockMessenger struct {
	ctrl     *gomock.Controller
	recorder *MockMessengerMockRecorder
	isgomock struct{}
}

// MockMessengerMockRecorder is the mock recorder for MockMessenger.
type MockMessengerMockRecorder struct {
	mock *MockMessenger
}

// NewMockMessenger creates a new mock instance.
func NewMockMessenger(ctrl *gomock.Controller) *MockMessenger {
	mock := &MockMessenger{ctrl: ctrl}
	mock.recorder = &MockMessengerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessenger) EXPECT() *MockMessengerMockRecorder {
	return m.recorder
}

// Message mocks base method.
func (m *MockMessenger) Message(p *player.Player, s string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Message", p, s)
}

// Message indicates an expected call of Message.
func (mr *MockMessengerMockRecorder) Message(p, s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MockMessenger)(nil).Message), p, s)
}
