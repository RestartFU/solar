// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/ports/ports.go
//
// Generated by this command:
//
//	mockgen -destination mocks/ports.go -package mocks -source ./internal/ports/ports.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	player "github.com/df-mc/dragonfly/server/player"
	team "github.com/restartfu/solar/internal/core/team"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
	isgomock struct{}
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// LoadMemberTeam mocks base method.
func (m *MockDatabase) LoadMemberTeam(name string) (team.Team, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadMemberTeam", name)
	ret0, _ := ret[0].(team.Team)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LoadMemberTeam indicates an expected call of LoadMemberTeam.
func (mr *MockDatabaseMockRecorder) LoadMemberTeam(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadMemberTeam", reflect.TypeOf((*MockDatabase)(nil).LoadMemberTeam), name)
}

// LoadTeam mocks base method.
func (m *MockDatabase) LoadTeam(name string) (team.Team, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadTeam", name)
	ret0, _ := ret[0].(team.Team)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LoadTeam indicates an expected call of LoadTeam.
func (mr *MockDatabaseMockRecorder) LoadTeam(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTeam", reflect.TypeOf((*MockDatabase)(nil).LoadTeam), name)
}

// SaveTeam mocks base method.
func (m *MockDatabase) SaveTeam(team team.Team) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveTeam", team)
}

// SaveTeam indicates an expected call of SaveTeam.
func (mr *MockDatabaseMockRecorder) SaveTeam(team any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTeam", reflect.TypeOf((*MockDatabase)(nil).SaveTeam), team)
}

// MockMessenger is a mock of Messenger interface.
type MockMessenger struct {
	ctrl     *gomock.Controller
	recorder *MockMessengerMockRecorder
	isgomock struct{}
}

// MockMessengerMockRecorder is the mock recorder for MockMessenger.
type MockMessengerMockRecorder struct {
	mock *MockMessenger
}

// NewMockMessenger creates a new mock instance.
func NewMockMessenger(ctrl *gomock.Controller) *MockMessenger {
	mock := &MockMessenger{ctrl: ctrl}
	mock.recorder = &MockMessengerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessenger) EXPECT() *MockMessengerMockRecorder {
	return m.recorder
}

// Message mocks base method.
func (m *MockMessenger) Message(p *player.Player, s string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Message", p, s)
}

// Message indicates an expected call of Message.
func (mr *MockMessengerMockRecorder) Message(p, s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MockMessenger)(nil).Message), p, s)
}
